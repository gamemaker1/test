# .github/workflows/ci.yaml
# This file defines the workflows to be run with GitHub Actions on every push.

name: CI

# Run the `Build` action on push to the `develop` branch, and the `Build` and
# `Publish` actions on a tag push.
on:
  push:
    branches:
      - develop
      - stable
    tags:
      - v*

# The jobs to run.
jobs:
  # Build and test
  build:
    name: Build
    # Run the job on a Linux machine.
    runs-on: ubuntu-latest
    steps:
      # `git-clone` the repository on the branch that a push occurred on.
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          submodules: true
      # Prepare for the build.
      - name: Prepare for the build
        run: |
          rm -rf build && mkdir build && cd build
          cp -r ../sources/ ./
          cp -r ../scripts/dockerfiles/* ./
      # Build and tag each image individually.
      - name: Build `bap-base`
        run: |
          cd build
          docker build --tag bap-base --file base.dockerfile .
      - name: Build `bap-client`
        run: |
          cd build
          docker build --tag bap-client --file client.dockerfile .
      - name: Build `bap-protocol-helper`
        run: |
          cd build
          docker build --tag bap-protocol-helper --file protocol-helper.dockerfile .
      - name: Build `bap-storefront`
        run: |
          cd build
          docker build --tag bap-storefront --file storefront.dockerfile .
  publish:
    name: Publish
    # Run the `Publish` action only if the developer has pushed a tag to GitHub
    # and the `Build` job succeeds.
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    # Run the job on a Linux machine.
    runs-on: ubuntu-latest
    steps:
      # `git-clone` the repository on the branch that a push occurred on (this should be the `stable` branch).
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          submodules: true
      # Prepare for the build.
      - name: Prepare for the build
        run: |
          rm -rf build && mkdir build && cd build
          cp -r ../sources/ ./
          cp -r ../scripts/dockerfiles/* ./
      # Publish all the images to GHCR.
      - name: Log in to GHCR
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push `bap-base`
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: build/
          file: base.dockerfile
          push: true
          tags: ghcr.io/gamemaker1/bap-base
      - name: Build and push `bap-client`
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: build/
          file: client.dockerfile
          push: true
          tags: ghcr.io/gamemaker1/bap-client
      - name: Build and push `bap-protocol-helper`
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: build/
          file: protocol-helper.dockerfile
          push: true
          tags: ghcr.io/gamemaker1/bap-protocol-helper
      - name: Build and push `bap-storefront`
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: build/
          file: storefront.dockerfile
          push: true
          tags: ghcr.io/gamemaker1/bap-storefront
